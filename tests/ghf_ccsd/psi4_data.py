import itertools

from chem.hf.ghf_data import GHF_Data
from chem.meta.coordinates import Descartes
import numpy as np
from numpy.typing import NDArray


PSI4_MU_BAR_IA = {
    Descartes.x: np.array([
        [0.0, 0.0, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
        [0.065762610303468, 0.0, 0.0, 0.0,],
        [0.0, 0.065762610303468, 0.0, 0.0,],
    ]),
    Descartes.y: np.array([
        [0.0, 0.0, -0.055511540012045, 0.0,],
        [0.0, 0.0, 0.0, -0.055511540012045,],
        [0.0, 0.0, -0.109470745197504, 0.0,],
        [0.0, 0.0, 0.0, -0.109470745197504,],
        [-0.756949029804676, 0.0, 0.0, 0.0,],
        [0.0, -0.756949029804676, 0.0, 0.0,],
        [0.0, 0.0, 0.656689990154577, 0.0,],
        [0.0, 0.0, 0.0, 0.656689990154577,],
        [0.0, 0.0, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
    ]),
    Descartes.z: np.array([
        [-0.045301907858314, 0.0, 0.0, 0.0,],
        [0.0, -0.045301907858314, 0.0, 0.0,],
        [-0.051186365046473, 0.0, 0.0, 0.0,],
        [0.0, -0.051186365046473, 0.0, 0.0,],
        [0.0, 0.0, -0.580477576777052, 0.0,],
        [0.0, 0.0, 0.0, -0.580477576777052,],
        [0.481036934775297, 0.0, 0.0, 0.0,],
        [0.0, 0.481036934775297, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
        [0.0, 0.0, 0.0, 0.0,],
    ]),
}


PSI4_MU_BAR_IjAb = {
    Descartes.x: np.array([
        [
            [[0.00000000,  0.00000000],  [0.00000000,  0.00000000]],
            [[0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
            [[-0.00000000,  0.00000000],  [0.00000000, -0.00000000]],
            [[0.00000000,  0.00000000],  [0.00000000,  0.00000000]],
            [[-0.00190067, -0.00000000], [-0.00000000, -0.00124972]],
        ],
        [
            [[0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
            [[-0.00000000,  0.00000000],  [0.00000000, -0.00000000]],
            [[0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
            [[-0.00000000, -0.00000000], [-0.00000000, -0.00000000]],
            [[0.03071798,  0.00000000],  [0.00000000,  0.01786746]],
        ],
        [
            [[-0.00000000,  0.00000000],  [0.00000000, -0.00000000]],
            [[0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
            [[0.00000000,  0.00000000],  [0.00000000,  0.00000000]],
            [[-0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
            [[-0.00000000,  0.00673403],  [0.01045082,  0.00000000]],
        ],
        [
            [[0.00000000,  0.00000000],  [0.00000000,  0.00000000]],
            [[-0.00000000, -0.00000000], [-0.00000000, -0.00000000]],
            [[-0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
            [[0.00000000, -0.00000000], [-0.00000000, -0.00000000]],
            [[-0.00754682, -0.00000000], [-0.00000000,  0.01150515]],
        ],
        [
            [[-0.00190067, -0.00000000], [-0.00000000, -0.00124972]],
            [[0.03071798,  0.00000000],  [0.00000000,  0.01786746]],
            [[-0.00000000,  0.01045082],  [0.00673403,  0.00000000]],
            [[-0.00754682, -0.00000000], [-0.00000000,  0.01150515]],
            [[-0.00000000,  0.00000000],  [0.00000000,  0.00000000]],
        ]
    ]),
    Descartes.y: np.array([
        [
            [[0.00000000, -0.00105535], [-0.00105535, -0.00000000]],
            [[-0.00000000,  0.00043566], [-0.00036717, -0.00000000]],
            [[-0.00214473, -0.00000000], [-0.00000000, -0.00386052]],
            [[-0.00000000,  0.00189619],  [0.00265813,  0.00000000]],
            [[0.00000000,  0.00000000],  [0.00000000,  0.00000000]],
        ],
        [
            [[0.00000000, -0.00036717],  [0.00043566, -0.00000000]],
            [[0.00000000, -0.00679017], [-0.00679017, -0.00000000]],
            [[0.02195697,  0.00000000],  [0.00000000,  0.03024311]],
            [[-0.00000000, -0.01113964], [-0.02056151, -0.00000000]],
            [[-0.00000000, -0.00000000], [-0.00000000, -0.00000000]],
        ],
        [
            [[-0.00214473, -0.00000000], [-0.00000000, -0.00386052]],
            [[0.02195697,  0.00000000],  [0.00000000,  0.03024311]],
            [[0.00000000, -0.05984478], [-0.05984478, -0.00000000]],
            [[0.03457812, -0.00000000], [-0.00000000,  0.05560465]],
            [[0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
        ],
        [
            [[-0.00000000,  0.00265813],  [0.00189619,  0.00000000]],
            [[-0.00000000, -0.02056151], [-0.01113964, -0.00000000]],
            [[0.03457812, -0.00000000], [-0.00000000,  0.05560465]],
            [[0.00000000, -0.07175880], [-0.07175880, -0.00000000]],
            [[0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
        ],
        [
            [[0.00000000,  0.00000000],  [0.00000000,  0.00000000]],
            [[-0.00000000, -0.00000000], [-0.00000000, -0.00000000]],
            [[0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
            [[0.00000000, -0.00000000], [-0.00000000,  0.00000000]],
            [[0.00000000, -0.03800082], [-0.03800082, -0.00000000]],
        ]
    ]),
    Descartes.z: np.array([
        [
            [[-0.00122875, -0.00000000], [-0.00000000, -0.00060678],],
            [[-0.00138308, -0.00000000],  [0.00000000,  0.00112794],],
            [[0.00000000, -0.00311126], [-0.00174706,  0.00000000],],
            [[0.00294655,  0.00000000], [-0.00000000,  0.00341753],],
            [[0.00000000,  0.00000000],  [0.00000000,  0.00000000],],
        ],
        [
            [[-0.00138308,  0.00000000], [-0.00000000,  0.00112794],],
            [[0.00567631, -0.00000000], [-0.00000000, -0.01656360],],
            [[-0.00000000,  0.01204824],  [0.00968822, -0.00000000],],
            [[-0.00494186,  0.00000000],  [0.00000000, -0.04751553],],
            [[0.00000000, -0.00000000], [-0.00000000, -0.00000000],],
        ],
        [
            [[0.00000000, -0.00174706], [-0.00311126,  0.00000000],],
            [[-0.00000000,  0.00968822],  [0.01204824, -0.00000000],],
            [[-0.04131878,  0.00000000],  [0.00000000, -0.03021427],],
            [[-0.00000000,  0.03074188],  [0.04162006,  0.00000000],],
            [[-0.00000000,  0.00000000],  [0.00000000, -0.00000000],],
        ],
        [
            [[0.00294655, -0.00000000],  [0.00000000,  0.00341753],],
            [[-0.00494186,  0.00000000],  [0.00000000, -0.04751553],],
            [[-0.00000000,  0.04162006],  [0.03074188,  0.00000000],],
            [[-0.06014308, -0.00000000], [-0.00000000, -0.07114661],],
            [[-0.00000000,  0.00000000],  [0.00000000, -0.00000000],],
        ],
        [
            [[0.00000000,  0.00000000],  [0.00000000,  0.00000000],],
            [[0.00000000, -0.00000000], [-0.00000000, -0.00000000],],
            [[-0.00000000,  0.00000000],  [0.00000000, -0.00000000],],
            [[-0.00000000,  0.00000000],  [0.00000000, -0.00000000],],
            [[-0.05169415, -0.00000000], [-0.00000000, -0.01553448],],
        ],
    ]),
}


def psi4_rhf_doubles_to_ghf(psi4: NDArray, ghf_data: GHF_Data) -> NDArray:
    assert len(psi4.shape) == 4
    doubles_rhf = psi4.transpose(2, 3, 0, 1)
    no = ghf_data.no // 2
    nv = ghf_data.nv // 2
    assert doubles_rhf.shape == (nv, nv, no, no)
    out = np.zeros(shape=[nv*2, nv*2, no*2, no*2])
    for a, b, i, j in itertools.product(
        range(nv), range(nv), range(no), range(no)
    ):
        out[2*a, 2*b, 2*i, 2*j] = doubles_rhf[a, b, i, j]
        out[2*a+1, 2*b+1, 2*i+1, 2*j+1] = doubles_rhf[a, b, i, j]

    return out
